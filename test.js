const getRndNumber = (row, col) => {
  return Math.floor(Math.random() * 1000);
};

const generateArray = (arrayLength) => {
  const result = [];
  for (let col = 0; col < arrayLength; col++) {
    result.push([]);
    for (let row = 0; row < arrayLength; row++) {
      result[col].push(getRndNumber(row, col));

      while (
        (col > 0 &&
          (result[col][row] < result[col - 1][row] ||
            result[col][row] - result[col - 1][row] > 10)) ||
        (row > 0 &&
          (result[col][row] < result[col][row - 1] ||
            result[col][row] - result[col][row - 1] > 10)) ||
        (col === 0 && row === 0 && result[col][row] > 10)
      ) {
        result[col][row] = getRndNumber(row, col);
      }
    }
  }

  return result;
};

// returns location as [col,row]
const lookupO_Of_N = (arr, lookupNum) => {
  let row = 0;
  let col = arr.length - 1;

  while (col > 0 || row < arr.length - 1) {
    counter++;
    counterOofN++;

    if (arr[col][row] === lookupNum) {
      return [col, row];
    }

    if (row < arr.length - 1 && arr[col][row + 1] === lookupNum) {
      return [col, row + 1];
    } else if (col > 0 && arr[col - 1][row] === lookupNum) {
      return [col - 1, row];
    } else {
      let colDecrease = 0;
      let rowIncrease = 0;

      if (row < arr.length - 1 && col > 0 && arr[col - 1][row] < lookupNum) {
        rowIncrease = 1;
      } else if (col === 0 && row < arr.length - 1) {
        rowIncrease = 1;
      }

      if (row < arr.length - 1 && col > 0 && arr[col][row + 1] > lookupNum) {
        colDecrease = 1;
      } else if (col > 0 && row === arr.length - 1) {
        colDecrease = 1;
      }

      col -= colDecrease;
      row += rowIncrease;

      if (colDecrease === 0 && rowIncrease === 0) {
        console.log("the number was not found");
        return;
      }
    }

    if (col === 0 && row === arr.length - 1) {
      console.log("the number was not found");
      return;
    }
  }

  if (arr[col][row] === lookupNum) {
    return [col, row];
  }

  console.log("the number was not found");
  return;
};

let counter = 0;

let counterOofN = 0;
let counterRecursive = 0;

const binarySearch = (arr, lookupNum) => {
  let bottomPos = 0;
  let topPos = arr.length;
  let midPoint = Math.floor((bottomPos + topPos) / 2);

  while (bottomPos < topPos) {
    counter++;
    counterRecursive++;
    midPoint = Math.floor((bottomPos + topPos) / 2);

    if (arr[midPoint] === lookupNum) {
      return midPoint;
    } else if (arr[midPoint] >= lookupNum) {
      topPos = midPoint;
    } else if (arr[midPoint] <= lookupNum) {
      bottomPos = midPoint + 1;
    } else {
      return;
    }
  }
};

const handleDivideAndConquer = (arr, lookupNum) => {
  const result = divideAndConquer(arr, 0, arr.length - 1, lookupNum);

  if (result) {
    return result;
  } else {
    console.log("Searched number was not found!");
  }
};

const divideAndConquer = (arr, bottom, top, lookupNum) => {
  counter++;
  counterRecursive++;

  const midpoint = Math.floor((bottom + top) / 2);
  let res = undefined;

  if (bottom < top) {
    res = divideAndConquer(arr, bottom, midpoint, lookupNum);

    if (!res) {
      res = divideAndConquer(arr, midpoint + 1, top, lookupNum);
    }
  }

  let row = undefined;

  if (!res) {
    row = binarySearch(arr[midpoint], lookupNum);
  }

  if (typeof row === "number") {
    return [midpoint, row];
  } else {
    return res;
  }
};

const main = () => {
  // array was generated using:
  // const matrixSize = 50;
  // const arr = generateArray(matrixSize);

  const arr = [
    [
      5, 12, 18, 20, 25, 35, 39, 49, 49, 52, 52, 53, 59, 63, 67, 68, 75, 80, 84,
      86, 89, 91, 100, 106, 109, 116, 119, 120, 126, 129, 132, 141, 147, 157,
      161, 168, 173, 177, 182, 182, 191, 200, 208, 218, 228, 228, 234, 237, 243,
      250,
    ],
    [
      11, 19, 22, 30, 35, 42, 46, 52, 54, 62, 62, 62, 63, 70, 74, 77, 83, 83,
      84, 91, 98, 101, 105, 107, 109, 117, 125, 130, 130, 133, 136, 144, 149,
      159, 162, 172, 174, 177, 187, 191, 200, 209, 212, 218, 228, 232, 240, 240,
      248, 255,
    ],
    [
      17, 19, 28, 36, 39, 47, 51, 52, 56, 66, 72, 72, 72, 79, 84, 86, 89, 92,
      93, 95, 100, 101, 105, 109, 115, 122, 130, 138, 140, 140, 146, 152, 158,
      168, 171, 177, 181, 181, 188, 198, 207, 215, 217, 222, 231, 233, 242, 247,
      257, 260,
    ],
    [
      22, 23, 31, 37, 40, 47, 53, 61, 63, 68, 74, 82, 82, 83, 85, 95, 97, 101,
      103, 105, 107, 108, 110, 112, 119, 127, 136, 139, 141, 142, 146, 153, 159,
      168, 176, 180, 190, 191, 194, 202, 209, 218, 227, 229, 235, 236, 245, 247,
      257, 263,
    ],
    [
      27, 27, 34, 44, 44, 50, 57, 66, 73, 75, 79, 85, 85, 92, 92, 95, 99, 101,
      109, 110, 117, 118, 118, 118, 126, 132, 141, 145, 147, 151, 154, 162, 163,
      168, 176, 183, 192, 200, 204, 210, 210, 219, 229, 235, 241, 244, 249, 255,
      259, 264,
    ],
    [
      36, 36, 40, 46, 49, 51, 60, 66, 73, 78, 87, 89, 92, 92, 93, 102, 102, 110,
      117, 120, 126, 127, 127, 127, 134, 142, 150, 151, 155, 159, 161, 170, 170,
      175, 179, 186, 196, 204, 208, 211, 214, 219, 229, 239, 243, 252, 256, 259,
      269, 271,
    ],
    [
      44, 45, 50, 54, 56, 59, 64, 73, 75, 80, 88, 93, 95, 95, 97, 103, 112, 120,
      121, 127, 127, 127, 133, 137, 140, 143, 150, 156, 157, 167, 170, 177, 178,
      183, 186, 195, 201, 210, 210, 217, 222, 227, 230, 239, 246, 254, 256, 266,
      274, 279,
    ],
    [
      50, 51, 60, 60, 65, 69, 73, 82, 83, 88, 96, 98, 103, 103, 103, 112, 113,
      120, 127, 132, 134, 136, 142, 143, 147, 148, 151, 157, 164, 174, 175, 185,
      187, 190, 195, 196, 202, 210, 220, 220, 229, 230, 238, 241, 248, 258, 266,
      276, 279, 279,
    ],
    [
      56, 61, 70, 70, 70, 74, 80, 90, 90, 91, 99, 108, 113, 113, 113, 121, 122,
      123, 131, 133, 141, 142, 145, 152, 157, 158, 161, 162, 170, 178, 180, 186,
      193, 193, 200, 201, 208, 213, 222, 226, 235, 240, 244, 244, 252, 258, 267,
      276, 283, 286,
    ],
    [
      65, 67, 70, 70, 70, 79, 89, 97, 98, 100, 101, 111, 118, 120, 120, 125,
      126, 126, 134, 135, 141, 143, 146, 156, 160, 160, 165, 170, 170, 179, 182,
      190, 196, 201, 209, 211, 213, 216, 223, 226, 235, 243, 247, 253, 261, 266,
      276, 286, 292, 296,
    ],
    [
      75, 76, 80, 80, 80, 87, 93, 97, 102, 108, 110, 112, 120, 124, 124, 125,
      134, 136, 141, 143, 145, 147, 147, 156, 160, 166, 173, 176, 176, 183, 190,
      199, 204, 208, 212, 212, 217, 217, 227, 232, 235, 243, 251, 256, 266, 273,
      280, 290, 295, 299,
    ],
    [
      82, 85, 88, 90, 90, 91, 100, 100, 103, 110, 110, 113, 123, 131, 134, 134,
      144, 146, 146, 146, 148, 155, 155, 160, 170, 170, 180, 186, 186, 189, 196,
      205, 209, 210, 213, 214, 221, 222, 231, 232, 239, 243, 251, 256, 266, 275,
      281, 290, 295, 305,
    ],
    [
      84, 88, 92, 98, 100, 101, 102, 109, 113, 114, 117, 123, 124, 134, 135,
      144, 144, 146, 149, 154, 156, 161, 161, 165, 175, 178, 183, 190, 193, 194,
      197, 207, 213, 214, 215, 219, 228, 232, 236, 241, 242, 249, 259, 266, 271,
      280, 287, 291, 298, 308,
    ],
    [
      85, 91, 93, 101, 105, 106, 106, 111, 119, 119, 125, 132, 132, 136, 137,
      144, 152, 153, 159, 161, 165, 170, 170, 174, 179, 182, 184, 192, 194, 200,
      200, 209, 217, 223, 224, 227, 234, 237, 243, 245, 251, 254, 264, 274, 274,
      280, 289, 295, 299, 308,
    ],
    [
      92, 95, 96, 101, 109, 114, 115, 116, 123, 125, 133, 133, 142, 145, 145,
      151, 161, 163, 168, 168, 168, 171, 175, 177, 179, 183, 190, 199, 203, 205,
      210, 212, 218, 228, 229, 233, 239, 246, 246, 255, 260, 264, 270, 277, 278,
      285, 292, 302, 309, 316,
    ],
    [
      97, 97, 104, 108, 109, 115, 116, 119, 126, 134, 134, 140, 146, 152, 155,
      155, 161, 169, 172, 178, 178, 179, 180, 180, 187, 187, 190, 199, 208, 215,
      219, 221, 221, 229, 232, 235, 240, 246, 254, 259, 266, 266, 274, 282, 288,
      290, 297, 303, 309, 318,
    ],
    [
      104, 107, 114, 118, 119, 120, 121, 123, 127, 134, 136, 140, 147, 157, 165,
      165, 166, 170, 180, 184, 187, 189, 189, 189, 197, 197, 197, 199, 208, 217,
      221, 229, 231, 232, 240, 243, 246, 246, 254, 264, 266, 274, 283, 289, 298,
      298, 302, 309, 311, 320,
    ],
    [
      109, 111, 118, 120, 124, 127, 128, 128, 137, 142, 142, 142, 149, 158, 166,
      172, 174, 179, 183, 193, 197, 198, 199, 199, 203, 206, 207, 208, 208, 217,
      222, 232, 232, 238, 246, 251, 254, 255, 262, 267, 267, 277, 284, 290, 298,
      298, 307, 316, 320, 326,
    ],
    [
      115, 121, 123, 126, 132, 137, 137, 137, 145, 145, 147, 148, 156, 166, 175,
      181, 184, 186, 191, 193, 198, 198, 208, 209, 212, 214, 215, 218, 218, 220,
      230, 237, 242, 242, 252, 255, 257, 262, 270, 277, 277, 281, 289, 294, 302,
      308, 311, 318, 323, 326,
    ],
    [
      117, 121, 128, 131, 140, 144, 145, 145, 149, 152, 152, 155, 158, 166, 175,
      182, 187, 191, 194, 198, 198, 202, 212, 217, 217, 224, 225, 226, 226, 230,
      238, 245, 245, 251, 254, 261, 266, 270, 274, 280, 287, 287, 296, 304, 304,
      308, 313, 322, 328, 332,
    ],
    [
      117, 126, 135, 138, 143, 152, 152, 153, 159, 159, 162, 164, 165, 169, 175,
      185, 192, 199, 202, 208, 208, 209, 212, 221, 224, 234, 234, 236, 236, 240,
      243, 249, 250, 252, 260, 266, 271, 280, 284, 285, 293, 295, 299, 307, 308,
      315, 316, 322, 329, 337,
    ],
    [
      118, 128, 137, 144, 149, 154, 161, 161, 168, 169, 172, 174, 174, 178, 184,
      191, 197, 205, 210, 214, 217, 217, 222, 224, 225, 235, 240, 240, 240, 248,
      253, 254, 258, 262, 270, 270, 274, 281, 284, 285, 295, 300, 303, 309, 317,
      322, 326, 326, 330, 339,
    ],
    [
      124, 131, 140, 149, 149, 155, 164, 165, 170, 174, 181, 183, 183, 187, 194,
      201, 203, 205, 210, 214, 222, 227, 227, 229, 234, 244, 247, 250, 250, 251,
      256, 262, 267, 268, 276, 276, 279, 287, 293, 294, 295, 305, 307, 316, 321,
      329, 331, 332, 333, 343,
    ],
    [
      124, 133, 143, 151, 155, 162, 164, 170, 177, 179, 187, 189, 191, 197, 201,
      207, 212, 212, 217, 217, 225, 232, 235, 235, 238, 246, 253, 259, 260, 260,
      266, 269, 273, 276, 280, 281, 283, 289, 298, 302, 303, 305, 315, 321, 323,
      333, 335, 337, 343, 343,
    ],
    [
      124, 133, 143, 151, 155, 162, 167, 176, 182, 187, 193, 196, 198, 200, 210,
      215, 220, 222, 222, 227, 232, 241, 244, 245, 245, 255, 259, 264, 270, 270,
      271, 274, 277, 279, 289, 289, 292, 294, 304, 309, 310, 314, 315, 321, 327,
      333, 335, 340, 344, 352,
    ],
    [
      131, 140, 146, 155, 160, 164, 170, 176, 182, 190, 198, 203, 204, 207, 214,
      223, 223, 225, 229, 235, 240, 246, 253, 255, 255, 264, 265, 274, 277, 279,
      281, 284, 286, 288, 297, 299, 301, 301, 305, 309, 319, 324, 324, 325, 329,
      336, 342, 346, 353, 361,
    ],
    [
      131, 141, 148, 156, 164, 173, 177, 182, 191, 191, 199, 205, 206, 209, 219,
      226, 230, 235, 239, 242, 243, 246, 256, 263, 265, 271, 275, 275, 278, 288,
      290, 293, 295, 297, 303, 304, 308, 310, 315, 315, 320, 325, 329, 335, 337,
      339, 342, 350, 354, 363,
    ],
    [
      141, 145, 151, 159, 166, 175, 182, 190, 194, 199, 202, 205, 211, 215, 221,
      231, 237, 244, 246, 247, 250, 252, 257, 263, 269, 272, 278, 278, 278, 288,
      293, 294, 301, 307, 310, 311, 311, 319, 319, 324, 327, 331, 337, 339, 345,
      347, 347, 351, 354, 363,
    ],
    [
      144, 149, 159, 162, 168, 178, 184, 194, 195, 205, 206, 215, 216, 218, 225,
      233, 237, 244, 249, 257, 258, 260, 262, 265, 272, 280, 283, 284, 284, 292,
      294, 300, 302, 312, 319, 320, 320, 327, 327, 330, 334, 339, 344, 347, 348,
      355, 355, 355, 355, 364,
    ],
    [
      146, 150, 160, 166, 174, 181, 186, 196, 203, 213, 216, 220, 226, 228, 235,
      242, 244, 253, 255, 264, 267, 270, 272, 272, 276, 283, 288, 293, 294, 301,
      301, 309, 309, 312, 319, 329, 330, 336, 337, 340, 340, 348, 350, 352, 357,
      357, 359, 365, 365, 369,
    ],
    [
      150, 153, 162, 172, 180, 181, 187, 197, 204, 213, 222, 230, 230, 230, 237,
      246, 248, 255, 255, 264, 272, 276, 278, 281, 283, 291, 296, 303, 304, 304,
      306, 316, 319, 320, 321, 331, 331, 339, 345, 345, 349, 351, 354, 355, 362,
      365, 369, 373, 374, 377,
    ],
    [
      153, 160, 170, 179, 185, 191, 192, 198, 206, 214, 223, 231, 232, 238, 242,
      250, 252, 258, 264, 270, 275, 283, 288, 291, 292, 300, 305, 311, 311, 313,
      314, 318, 320, 324, 329, 333, 335, 339, 347, 355, 359, 360, 364, 364, 368,
      374, 378, 380, 380, 384,
    ],
    [
      158, 167, 175, 181, 188, 192, 202, 205, 214, 224, 233, 238, 238, 245, 248,
      251, 258, 264, 272, 272, 281, 287, 296, 299, 300, 300, 305, 311, 314, 315,
      319, 324, 327, 330, 336, 339, 344, 344, 349, 355, 363, 365, 370, 374, 378,
      380, 384, 387, 389, 394,
    ],
    [
      160, 169, 177, 183, 188, 193, 203, 210, 218, 224, 233, 242, 245, 248, 258,
      259, 262, 269, 276, 279, 287, 287, 296, 303, 308, 309, 313, 317, 323, 323,
      325, 328, 330, 334, 343, 347, 351, 351, 356, 365, 366, 375, 377, 383, 383,
      387, 387, 392, 398, 403,
    ],
    [
      167, 176, 177, 187, 192, 198, 208, 214, 221, 229, 236, 246, 253, 257, 267,
      269, 272, 276, 283, 285, 294, 297, 305, 307, 314, 316, 317, 327, 328, 333,
      335, 337, 338, 344, 350, 352, 353, 353, 358, 365, 368, 378, 381, 384, 391,
      391, 394, 401, 403, 410,
    ],
    [
      168, 177, 184, 193, 193, 200, 210, 217, 222, 231, 241, 250, 254, 262, 270,
      270, 280, 280, 283, 288, 294, 300, 306, 308, 317, 326, 326, 334, 337, 342,
      344, 347, 347, 351, 351, 354, 356, 361, 363, 372, 377, 386, 390, 392, 398,
      398, 398, 407, 408, 414,
    ],
    [
      171, 181, 184, 193, 203, 207, 210, 217, 225, 232, 241, 251, 261, 265, 272,
      279, 286, 286, 293, 295, 296, 301, 308, 313, 323, 327, 330, 337, 337, 342,
      344, 349, 352, 354, 354, 362, 363, 367, 367, 373, 379, 386, 394, 401, 406,
      408, 408, 412, 416, 423,
    ],
    [
      174, 181, 185, 195, 203, 213, 219, 219, 225, 234, 241, 251, 261, 265, 275,
      281, 286, 288, 293, 298, 303, 311, 311, 314, 324, 328, 333, 341, 341, 351,
      353, 356, 358, 363, 364, 371, 371, 372, 376, 379, 385, 392, 401, 408, 408,
      418, 418, 421, 421, 428,
    ],
    [
      174, 184, 185, 195, 205, 214, 219, 223, 226, 235, 245, 252, 262, 265, 275,
      281, 288, 291, 298, 303, 303, 312, 320, 324, 327, 336, 337, 346, 346, 352,
      358, 359, 359, 369, 370, 376, 378, 382, 385, 386, 386, 395, 402, 411, 413,
      420, 423, 426, 427, 437,
    ],
    [
      179, 187, 190, 196, 206, 214, 221, 227, 234, 242, 250, 255, 264, 271, 275,
      281, 291, 294, 303, 304, 309, 318, 328, 334, 336, 340, 345, 351, 353, 355,
      365, 367, 368, 374, 379, 382, 382, 390, 395, 395, 396, 399, 404, 413, 423,
      430, 431, 431, 431, 441,
    ],
    [
      189, 191, 192, 196, 206, 215, 223, 230, 237, 244, 252, 259, 269, 271, 279,
      287, 295, 304, 310, 311, 319, 324, 334, 336, 339, 346, 354, 359, 359, 360,
      370, 371, 374, 384, 388, 388, 388, 398, 404, 405, 405, 405, 407, 414, 423,
      432, 435, 439, 439, 447,
    ],
    [
      195, 197, 201, 204, 208, 216, 224, 230, 238, 246, 254, 261, 270, 275, 282,
      290, 298, 308, 318, 318, 322, 329, 335, 337, 340, 346, 354, 364, 369, 370,
      377, 381, 381, 388, 389, 398, 398, 402, 409, 411, 412, 412, 414, 424, 427,
      434, 444, 448, 448, 451,
    ],
    [
      203, 203, 208, 213, 218, 221, 227, 231, 238, 248, 257, 267, 274, 284, 285,
      290, 299, 309, 318, 325, 329, 336, 341, 344, 346, 347, 354, 364, 372, 375,
      384, 386, 390, 392, 392, 400, 403, 406, 414, 419, 421, 422, 424, 425, 428,
      436, 444, 453, 456, 458,
    ],
    [
      213, 213, 217, 217, 222, 229, 230, 237, 243, 249, 257, 267, 276, 284, 288,
      296, 304, 311, 321, 327, 331, 337, 342, 351, 354, 357, 362, 365, 374, 378,
      385, 390, 396, 399, 399, 402, 408, 410, 414, 424, 427, 429, 433, 433, 436,
      443, 451, 455, 462, 463,
    ],
    [
      217, 222, 223, 224, 231, 231, 237, 239, 248, 251, 259, 268, 277, 286, 290,
      296, 304, 312, 322, 331, 333, 343, 350, 351, 359, 365, 366, 371, 379, 379,
      389, 390, 400, 401, 408, 412, 417, 419, 423, 424, 433, 434, 442, 443, 444,
      446, 452, 462, 466, 470,
    ],
    [
      221, 225, 230, 230, 232, 232, 242, 248, 251, 257, 261, 270, 279, 286, 292,
      302, 312, 316, 323, 333, 340, 346, 354, 356, 363, 365, 369, 374, 379, 385,
      392, 396, 403, 408, 408, 415, 420, 425, 428, 428, 433, 443, 451, 453, 454,
      454, 462, 462, 470, 474,
    ],
    [
      226, 231, 239, 239, 239, 242, 244, 253, 258, 267, 271, 280, 286, 286, 295,
      303, 313, 318, 327, 335, 342, 347, 355, 361, 365, 372, 376, 377, 380, 386,
      392, 398, 407, 412, 414, 421, 421, 426, 435, 438, 443, 448, 458, 463, 464,
      464, 469, 470, 474, 478,
    ],
    [
      232, 236, 239, 242, 247, 248, 249, 258, 258, 268, 275, 280, 290, 290, 298,
      307, 314, 323, 331, 340, 349, 349, 358, 366, 375, 378, 386, 386, 386, 387,
      396, 405, 407, 413, 414, 423, 430, 431, 440, 444, 445, 453, 463, 464, 465,
      466, 474, 475, 480, 485,
    ],
    [
      232, 237, 242, 243, 249, 249, 256, 265, 267, 273, 277, 282, 291, 299, 307,
      307, 316, 325, 334, 342, 351, 359, 359, 369, 379, 382, 389, 390, 392, 395,
      401, 411, 416, 420, 422, 427, 435, 441, 442, 451, 452, 453, 463, 471, 473,
      474, 483, 485, 489, 490,
    ],
    [
      240, 243, 245, 249, 250, 252, 261, 266, 271, 273, 281, 291, 300, 300, 307,
      311, 317, 325, 335, 343, 352, 360, 367, 369, 379, 387, 393, 399, 399, 402,
      403, 411, 421, 429, 432, 434, 439, 447, 451, 460, 462, 462, 470, 479, 482,
      484, 484, 490, 498, 498,
    ],
  ];
  console.log(arr);

  console.log("searching existing number (188):");
  const res1 = lookupO_Of_N(arr, 188);
  console.log("result:", res1);
  console.log("checking result: ", arr[res1[0]][res1[1]]);

  console.log("searching existing number (226):");
  const res2 = lookupO_Of_N(arr, 226);
  console.log("result:", res2);
  console.log("checking result: ", arr[res2[0]][res2[1]]);

  console.log("searching -1 (cant exist in generated matrix):");
  const res3 = lookupO_Of_N(arr, -1);
  console.log("result:", res3);
  console.log();

  console.log("searching existing number (188):");
  const resRecursive1 = handleDivideAndConquer(arr, 188);
  console.log("result:", resRecursive1);
  console.log("checking result: ", arr[resRecursive1[0]][resRecursive1[1]]);

  console.log("searching existing number (226):");
  const resRecursive2 = handleDivideAndConquer(arr, 226);
  console.log("result:", resRecursive2);
  console.log("checking result: ", arr[resRecursive2[0]][resRecursive2[1]]);

  console.log("searching -1 (cant exist in generated matrix):");
  const resRecursive3 = handleDivideAndConquer(arr, -1);
  console.log("result:", resRecursive3);
  console.log();
};

main();
